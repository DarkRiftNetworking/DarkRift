<Project>
  <!-- Global variables -->
  <PropertyGroup>
    <BuildArea>$(SolutionDir)Build/</BuildArea>
    <BuildDir>$(BuildArea)$(Configuration)/$(TargetFramework)/</BuildDir>
  </PropertyGroup>
  
  <!-- Get build task extensions -->
  <ItemGroup Condition="'$(SkipCopyToBuild)' != 'true'" >
    <PackageReference Include="MSBuildTasks" Version="1.5.0.235" />
  </ItemGroup>

  <PropertyGroup Condition="'$(USERPROFILE)' != '' AND '$(SkipCopyToBuild)' != 'true' ">
    <MSBuildCommunityTasksPath>$(USERPROFILE)/.nuget/packages/msbuildtasks/1.5.0.235/tools</MSBuildCommunityTasksPath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(HOME)' != '' AND '$(SkipCopyToBuild)' != 'true' ">
    <MSBuildCommunityTasksPath>$(HOME)/.nuget/packages/msbuildtasks/1.5.0.235/tools</MSBuildCommunityTasksPath>
  </PropertyGroup>

  <Import Project="$(MSBuildCommunityTasksPath)/MSBuild.Community.Tasks.Targets" Condition="'$(SkipCopyToBuild)' != 'true'" />

  <!-- Mash everything together into the DR folder structure and necessary zips -->
  <Target Name="MainAfterBuild" AfterTargets="Build" DependsOnTargets="CopyToBuild; Organize; ZipBuild; ZipSource; InstallInCLITool" Condition=" '$(TargetDir)' != '' AND '$(SkipCopyToBuild)' != 'true' ">
    
  </Target>

  <!-- Clean target to remove build dir -->
  <Target Name="MainAfterClean" AfterTargets="Clean" Condition=" '$(TargetDir)' != '' AND '$(SkipCopyToBuild)' != 'true' ">
    <RemoveDir Directories="$(BuildDir)" />
  </Target>

  <!-- Copy necessary files -->
  <Target Name="CopyToBuild" Condition="'$(SkipCopyToBuild)' != 'true'">
    <ItemGroup>
      <CopyFiles Include="$(TargetDir)*.*" />
    </ItemGroup>
    
    <Copy SourceFiles="@(CopyFiles)" DestinationFolder="$(BuildDir)" />
  </Target>
  
  <!-- Organize things into Lib folder -->
  <Target Name="Organize" Condition="'$(SkipCopyToBuild)' != 'true'">
    <!-- Lib folder contents for .NET Framework app -->
    <ItemGroup Condition=" '$(TargetFramework)' == 'net4.0' ">
      <LibFiles Include="$(BuildDir)*.dll" />
      <LibFiles Include="$(BuildDir)*.pdb" Exclude="$(BuildDir)DarkRift.Server.Console.pdb" />
      <LibFiles Include="$(BuildDir)*.xml" />
    </ItemGroup>

    <!-- Lib folder contents for .NET Core app -->
    <ItemGroup Condition=" '$(TargetFramework)' != 'net4.0' ">
      <LibFiles Include="$(BuildDir)*.dll" />
      <LibFiles Include="$(BuildDir)*.pdb" />
      <LibFiles Include="$(BuildDir)*.xml" />
      <LibFiles Include="$(BuildDir)*.deps.json" />
      <LibFiles Include="$(BuildDir)*.dll.config" />
      <LibFiles Include="$(BuildDir)*.runtimeconfig.dev.json" />
      <LibFiles Include="$(BuildDir)*.runtimeconfig.json" />
    </ItemGroup>

    <!-- Actual reorganisation -->
    <MakeDir Directories="$(BuildDir)Lib" />
    <Move SourceFiles="@(LibFiles)" DestinationFolder="$(BuildDir)Lib/" />
  </Target>

  <!-- Compress server heirachy into zip folder -->
  <!-- Ignore in coreonly as MSBuildTasks doesn't support core -->
  <Target Name="ZipBuild" Condition="'$(SkipCopyToBuild)' != 'true'">
    <ItemGroup>
      <ZipBuildFiles Include="$(BuildDir)**/*.*" Exclude="$(BuildDir)**/*.zip" />
    </ItemGroup>

    <Zip Files="@(ZipBuildFiles)" ZipFileName="$(BuildDir)DarkRift Server.zip" WorkingDirectory="$(BuildDir)" />
  </Target>

  <!-- Zip source together -->
  <!-- Ignore in coreonly as MSBuildTasks doesn't support core -->
  <Target Name="ZipSource" Condition="'$(SkipCopyToBuild)' != 'true'">
    <ItemGroup>
      <ZipSourceFiles Include="$(SolutionDir)*.*" Exclude="$(SolutionDir)release.py"/>
      <ZipSourceFiles Include="$(SolutionDir)DarkRift/**/*.*" Exclude="$(SolutionDir)DarkRift/bin/**/*.*;$(SolutionDir)DarkRift/obj/**/*.*" />
      <ZipSourceFiles Include="$(SolutionDir)DarkRift.Client/**/*.*" Exclude="$(SolutionDir)DarkRift.Client/bin/**/*.*;$(SolutionDir)DarkRift.Client/obj/**/*.*" />
      <ZipSourceFiles Include="$(SolutionDir)DarkRift.Documentation/**/*.*" Exclude="$(SolutionDir)DarkRift.Documentation/obj/**/*.*;$(SolutionDir)DarkRift.Documentation/_site/**/*.*" />
      <ZipSourceFiles Include="$(SolutionDir)DarkRift.Server/**/*.*" Exclude="$(SolutionDir)DarkRift.Server/bin/**/*.*;$(SolutionDir)DarkRift.Server/obj/**/*.*" />
      <ZipSourceFiles Include="$(SolutionDir)DarkRift.Server.Console/**/*.*" Exclude="$(SolutionDir)DarkRift.Server.Console/bin/**/*.*;$(SolutionDir)DarkRift.Server.Console/obj/**/*.*" />
      <ZipSourceFiles Include="$(SolutionDir)DarkRift.Server.Testing/**/*.*" Exclude="$(SolutionDir)DarkRift.Server.Testing/bin/**/*.*;$(SolutionDir)DarkRift.Server.Testing/obj/**/*.*" />
      <ZipSourceFiles Include="$(SolutionDir)DarkRift.Testing/**/*.*" Exclude="$(SolutionDir)DarkRift.Testing/bin/**/*.*;$(SolutionDir)DarkRift.Testing/obj/**/*.*" />
      <ZipSourceFiles Include="$(SolutionDir)DarkRift.SystemTesting/**/*.*" Exclude="$(SolutionDir)DarkRift.SystemTesting/bin/**/*.*;$(SolutionDir)DarkRift.SystemTesting/obj/**/*.*" />
    </ItemGroup>

    <Zip Files="@(ZipSourceFiles)" ZipFileName="$(BuildArea)DarkRift Source.zip" WorkingDirectory="$(SolutionDir)" />
  </Target>

  <!-- Install in DarkRift CLI tool as 'dev' -->
  <Target Name="InstallInCLITool" Condition="'$(SkipCopyToBuild)' != 'true'">
    <ItemGroup>
      <InstallFiles Include="$(BuildDir)/**/*.*" Exclude="$(BuildDir)/**/*.zip" />
    </ItemGroup>

    <PropertyGroup>
      <!-- Install Debug as Pro as the CLI tool does not support a 'Debug' tier-->
      <Tier Condition="$(Configuration) != 'Debug'">$(Configuration.ToLower())</Tier>
      <Tier Condition="$(Configuration) == 'Debug'">pro</Tier>

      <Platform Condition="$(TargetFramework) != 'net4.0'">core</Platform>
      <Platform Condition="$(TargetFramework) == 'net4.0'">framework</Platform>
    </PropertyGroup>

    <!-- Copy and maintain directory structure -->
    <Copy SourceFiles="@(InstallFiles)" DestinationFiles="@(InstallFiles->'$(UserProfile)/.darkrift/installed/$(Tier)/$(Platform)/dev/%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>
</Project>
